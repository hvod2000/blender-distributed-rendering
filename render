#!/bin/sh -e

# TODO: support target as second argument
if [ $# -lt 1 ] || [ $# -gt 2 ]; then
	# TODO: support argument for printing usage string, i.e. --help
	echo "Usage: $0 <source_blender_file> [target_png_file]"
	# TODO: support output of all scenes that are currently rendered
	exit 64
fi
SRC_BLEND=$1
TARGET=$2
# TODO: support CLI option to choose render engine
ENGINE=CYCLES # CYCLES or BLENDER_EEVEE

get_blender_file_id() (
	# TODO: find out if I can just use $1 instead of $src_blend
	src_blend=$1
	src_hash=$(sha256sum "$src_blend" | cut -d " " -f1)
	src_size=$(wc -c "$src_blend" | cut -d " " -f1)
	storage=${XDG_CACHE_HOME:-~/.cache}/blender-renders
	mkdir -p "$storage"
	echo "$storage/$src_hash$(( (src_size % 99) + 1 ))"
)


start_rendering() (
	id=$1
	# TODO: use argument instead of global variable
	cp -- "$SRC_BLEND" "$id.blend"
	blend="$id.blend"; png="${id%??}##.png"; frame="${id#"${id%??}"}"
	blender -b "$blend" -o "$png" -E $ENGINE -f "$frame" > "$id.log" 2>&1 &
	render_pid=$!
	render_cmd=$(ps -p "$render_pid" -o command=)
	# TODO: support remote host
	host=localhost
	printf "%s\n%s\n%s\n" $host $render_pid "$render_cmd" > "$id.desc"
)


check_rendering() (
	id=$1
	[ -f "$id.png" ] && { echo "done"; return 0; }
	[ -f "$id.desc" ] || return 1
	{ read -r host; read -r render_pid; read -r render_cmd; } < "$id.desc"
	# currently assume host="localhost"
	# TODO: support nonlocal host
	progress=$(tail -1 "$id.log")
	actual_cmd=$(ps -p "$render_pid" -o command=) || return 1
	[ ":$actual_cmd" = ":$render_cmd" ] || return 1
	echo "$progress"
)


id=$(get_blender_file_id "$SRC_BLEND")
if progress=$(check_rendering "$id"); then
	echo "current progress: $progress"
	if [ "done" = "$progress" ]; then
		# TODO: learn how articles work in english
		#echo "the cached result of the rendering is along this path:"
		echo "cached result of the rendering is along this path:"
		echo "  ${id}.png"
		[ -n "$TARGET" ] && {
			cp "${id}.png" "$TARGET"
			echo "The result has been copyied to $TARGET"
		}
	fi
else
	start_rendering "$id"
	{ read -r host && read -r render_pid; } < "$id.desc"
	echo "Just started rendering by $host:$render_pid"
fi
# TODO: support running until rendering is done
# TODO: support running multiple instances of waiters
