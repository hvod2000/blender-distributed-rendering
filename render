#!/bin/sh -e

# TODO: support target as second argument
if [ $# -lt 1 ] || [ $# -gt 2 ]; then
	echo "Usage: $0 <source_blender_file> [target_png_file]"
	exit 64
fi
SRC_BLEND=$1
TARGET=$2
ENGINE=CYCLES # CYCLES or BLENDER_EEVEE


get_blender_file_id() (
	src_blend=$1
	src_hash=$(sha256sum "$src_blend" | cut -d " " -f1)
	storage=${XDG_CACHE_HOME:-~/.cache}/blender-renders
	mkdir -p "$storage"
	echo "$storage/$src_hash"
)


start_rendering() (
	id=$1
	cp -- "$SRC_BLEND" "$id.blend"
	( blender -b "$id.blend" -o "$id##.png" -E $ENGINE -f 85 && mv "${id}85.png" "${id}.png" ) > "$id.log" 2>&1 &
	render_pid=$!
	# TODO: support remote host
	host=localhost
	printf "%s\n%s\n" $host $render_pid > "$id.desc"
)


check_rendering() (
	id=$1
	[ -f "$id.png" ] && { echo "done"; return 0; }
	[ -f "$id.desc" ] || return 1
	{ read -r host && read -r render_pid; } < "$id.desc"
	# currently assume host="localhost"
	# TODO: support nonlocal host
	progress=$(tail -1 "$id.log")
	# TODO: don't assume pid not being reused
	# TODO: use OS-independent way to check if process is alive
	ps -p "$render_pid" > /dev/null 2>&1 || return 1
	echo "$progress"
)


id=$(get_blender_file_id "$SRC_BLEND")
if progress=$(check_rendering "$id"); then
	echo "current progress: $progress"
	if [ "done" = "$progress" ]; then
		# TODO: print what is id and why it is printed
		echo "${id}.png"
		[ -n "$TARGET" ] && {
			cp "${id}.png" "$TARGET"
			echo "The result has been copyied to $TARGET"
		}
	fi
else
	start_rendering "$id"
	{ read -r host && read -r render_pid; } < "$id.desc"
	echo "Just started rendering by $host:$render_pid"
fi
# TODO: support running until rendering is done
